# pluginfactoryapp/services/agents/git_agent.py

import os
import subprocess
import datetime
import requests
from flask import current_app
import base64

def _run_git_command(command, check=True):
    """Helper to run a git command in the configured repository path."""
    repo_path = current_app.config['GIT_REPO_PATH']
    result = subprocess.run(command, cwd=repo_path, capture_output=True, text=True, encoding='utf-8')
    if check and result.returncode != 0:
        error_message = (
            f"Git command failed: {' '.join(command)}\n"
            f"Exit Code: {result.returncode}\n"
            f"Stdout: {result.stdout.strip()}\n"
            f"Stderr: {result.stderr.strip()}"
        )
        raise Exception(error_message)
    return result

def _create_pull_request(head_branch, base_branch, title, commit_message):

    """Creates a pull request using the Azure DevOps API."""
    token = current_app.config.get('GIT_API_TOKEN')
    organization = current_app.config.get('GIT_ORGANIZATION')
    repo_name = current_app.config.get('GIT_REPO_NAME')
    
    if not all([token, organization, repo_name]):
        print("⚠️ PR creation skipped: Azure DevOps credentials not fully configured.")
        return None
    api_url = f"https://o9git.visualstudio.com/{organization}/_apis/git/repositories/{repo_name}/pullrequests?api-version=6.0"

    # Azure DevOps uses Basic Authentication with the PAT as the password.
    # The username can be anything, but the PAT must be encoded.
    pat_encoded = base64.b64encode(f":{token}".encode("ascii")).decode("ascii")
    
    headers = {
        "Authorization": f"Basic {pat_encoded}",
        "Content-Type": "application/json",
    }
    
    # The request body structure is different from GitHub's.
    data = {
        "sourceRefName": f"refs/heads/{head_branch}",
        "targetRefName": f"refs/heads/{base_branch}",
        "title": title,
        "description": f"This PR was automatically generated by the Agentic Plugin Factory.\n\n**Commit Message:**\n```\n{commit_message}\n```",
    }

    try:
        response = requests.post(api_url, headers=headers, json=data)
        response.raise_for_status()
        pr_data = response.json()
        pr_list_url = f"https://o9git.visualstudio.com/{organization}/_git/{repo_name}/pullrequests"
        
        created_pr_id = pr_data.get('pullRequestId', 'unknown')
        
        print(f"✅ Successfully created Azure DevOps Pull Request #{created_pr_id}.")
        print(f"   View all pull requests at: {pr_list_url}")
        
        # Return the URL to the list page
        return pr_list_url
    except requests.exceptions.HTTPError as e:
        try:
            # First, try to parse the error as JSON
            error_content = e.response.json()
            error_message = error_content.get('message', 'Unknown JSON error')
        except requests.exceptions.JSONDecodeError:
            # If JSON parsing fails, print the raw text response
            print("❌ CRITICAL: Failed to parse API error response as JSON.")
            # Print the first 500 characters of the server's response
            print(f"   Server Response Text: {e.response.text[:500]}") 
            error_message = "Authentication failed. The server returned a non-JSON response (likely an HTML login page). Please verify your Personal Access Token."
      
        # Check if the error is because a PR already exists
        if 'already exists' in error_message:
            print(f"✅ An active pull request from '{head_branch}' to '{base_branch}' already exists.")
            return "Existing PR"
        raise Exception(f"Failed to create pull request. Status: {e.response.status_code}. Reason: {error_message}")
    except Exception as e:
        raise Exception(f"An unexpected error occurred while creating the pull request: {e}")

# --- THE MAIN FUNCTION IS MODIFIED AT THE END ---
def push_to_git_repository(plugin_name, repo_code, tenant_code, test_code):
    """
    Writes plugin files, commits, pushes, and creates a pull request.
    """
    repo_path = current_app.config['GIT_REPO_PATH']
    if not repo_path or not os.path.isdir(os.path.join(repo_path, '.git')):
        raise FileNotFoundError(f"Configuration error: GIT_REPO_PATH ('{repo_path}') is not a valid Git repository.")

    # Get branch names from config
    feature_branch = current_app.config['GIT_FEATURE_BRANCH']
    base_branch = current_app.config['GIT_BASE_BRANCH']
    commit_message = f"feat({plugin_name}): Generate plugin via Agentic Factory"

    try:
        # Synchronize with Git remote
        print("Step 1: Fetching latest updates...")
        _run_git_command(["git", "fetch", "origin"])
        print(f"Step 2: Checking out branch '{feature_branch}'...")
        _run_git_command(["git", "checkout", "-B", feature_branch, f"origin/{feature_branch}"])
        print(f"Step 3: Pulling latest changes into '{feature_branch}'...")
        _run_git_command(["git", "pull", "--rebase", "origin", feature_branch])
    except Exception as e:
        raise ConnectionRefusedError(f"Failed to synchronize with Git remote. Details: {e}")

    # Write files, add, and commit
    # ... (this part of your code is correct and remains the same) ...
    print("Step 4: Writing new plugin files...")
    repo_file_path = os.path.join(repo_path, 'helpers', f"{plugin_name}-Repo.py")
    tenant_file_path = os.path.join(repo_path, 'plugin_scripts', f"{plugin_name}-Tenant.py")
    test_file_path = os.path.join(repo_path, 'tests', f"test_{plugin_name}.py")
    os.makedirs(os.path.dirname(repo_file_path), exist_ok=True)
    os.makedirs(os.path.dirname(tenant_file_path), exist_ok=True)
    os.makedirs(os.path.dirname(test_file_path), exist_ok=True)
    with open(repo_file_path, "w", encoding='utf-8') as f: f.write(repo_code)
    with open(tenant_file_path, "w", encoding='utf-8') as f: f.write(tenant_code)
    with open(test_file_path, "w", encoding='utf-8') as f: f.write(test_code)
    print("Step 5: Committing new files...")
    _run_git_command(["git", "add", "."])
    status_result = _run_git_command(["git", "status", "--porcelain"])
    if not status_result.stdout:
        print("✅ No new changes to commit.")
    else:
        _run_git_command(["git", "commit", "-m", commit_message])

    # Push the new commit to the remote repository
    print(f"Step 6: Pushing changes to 'origin/{feature_branch}'...")
    _run_git_command(["git", "push", "origin", feature_branch])

    # --- THIS IS THE FINAL STEP ---
    # After a successful push, create the pull request
    print(f"Step 7: Creating Pull Request from '{feature_branch}' to '{base_branch}'...")
    pr_url = _create_pull_request(
        head_branch=feature_branch,
        base_branch=base_branch,
        title=f"Plugin Factory Updates for {plugin_name}",
        commit_message=commit_message
    )

    print("✅ Successfully completed Git operations.")
    return {
        "success": True,
        "message": "Successfully pushed changes and created pull request.",
        "branch": feature_branch,
        "commit_message": commit_message,
        "pull_request_url": pr_url
    }